{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/classPrivateFieldLooseKey\";\nvar api = 'https://area-sync-stagging.onrender.com';\nvar _accesToken = _classPrivateFieldLooseKey(\"accesToken\");\nvar _personal = _classPrivateFieldLooseKey(\"personal\");\nvar Client = function () {\n  function Client() {\n    _classCallCheck(this, Client);\n    Object.defineProperty(this, _accesToken, {\n      writable: true,\n      value: undefined\n    });\n    Object.defineProperty(this, _personal, {\n      writable: true,\n      value: null\n    });\n    this.isLoggedIn = false;\n  }\n  _createClass(Client, [{\n    key: \"fillRequestHeaders\",\n    value: function fillRequestHeaders() {\n      return {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + _classPrivateFieldLooseBase(this, _accesToken)[_accesToken]\n      };\n    }\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator(function* (endpoint) {\n        var response = yield fetch(endpoint, {\n          headers: this.fillRequestHeaders()\n        });\n        return yield response.json();\n      });\n      function getData(_x) {\n        return _getData.apply(this, arguments);\n      }\n      return getData;\n    }()\n  }, {\n    key: \"fetchPersonalData\",\n    value: function () {\n      var _fetchPersonalData = _asyncToGenerator(function* () {\n        try {\n          _classPrivateFieldLooseBase(this, _personal)[_personal] = yield this.getData(api + '/me');\n        } catch (error) {}\n      });\n      function fetchPersonalData() {\n        return _fetchPersonalData.apply(this, arguments);\n      }\n      return fetchPersonalData;\n    }()\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(function* (mail, password) {\n        try {\n          var response = yield fetch(api + \"/auth/login\", {\n            method: \"POST\",\n            headers: this.fillRequestHeaders(),\n            body: JSON.stringify({\n              email: mail,\n              password: password\n            })\n          });\n          var statusCode = response.status;\n          var data = yield response.json();\n          if (statusCode === 200) {\n            this.isLoggedIn = true;\n            _classPrivateFieldLooseBase(this, _accesToken)[_accesToken] = data.access_token;\n            yield this.fetchPersonalData();\n            return 200;\n          } else if (statusCode === 400) {\n            return 400;\n          }\n        } catch (error) {\n          console.error('Erreur de connexion :', error);\n          return 500;\n        }\n      });\n      function login(_x2, _x3) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n  }, {\n    key: \"discord_calendar\",\n    value: function () {\n      var _discord_calendar = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(api + \"/users/discord/calendar/connect\", {\n            method: \"POST\",\n            headers: this.fillRequestHeaders()\n          });\n          var statusCode = response.status;\n          var data = yield response.json();\n        } catch (error) {\n          console.error('Erreur de connexion :', error);\n          return 500;\n        }\n      });\n      function discord_calendar() {\n        return _discord_calendar.apply(this, arguments);\n      }\n      return discord_calendar;\n    }()\n  }, {\n    key: \"loginGithub\",\n    value: function () {\n      var _loginGithub = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(api + \"/users/github/login\", {\n            method: \"GET\",\n            headers: this.fillRequestHeaders()\n          });\n          console.log(\"Reponse: \" + response);\n          return response;\n        } catch (error) {\n          console.error('Erreur de connexion github:', error);\n          return 500;\n        }\n      });\n      function loginGithub() {\n        return _loginGithub.apply(this, arguments);\n      }\n      return loginGithub;\n    }()\n  }, {\n    key: \"loginNotion\",\n    value: function () {\n      var _loginNotion = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(api + \"/users/notion/login\", {\n            method: \"GET\",\n            headers: this.fillRequestHeaders()\n          });\n        } catch (error) {\n          console.error('Erreur de connexion github:', error);\n          return 500;\n        }\n      });\n      function loginNotion() {\n        return _loginNotion.apply(this, arguments);\n      }\n      return loginNotion;\n    }()\n  }, {\n    key: \"loginCalendar\",\n    value: function () {\n      var _loginCalendar = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(api + \"/users/calendar/login\", {\n            method: \"GET\",\n            headers: this.fillRequestHeaders()\n          });\n        } catch (error) {\n          console.error('Erreur de connexion github:', error);\n          return 500;\n        }\n      });\n      function loginCalendar() {\n        return _loginCalendar.apply(this, arguments);\n      }\n      return loginCalendar;\n    }()\n  }, {\n    key: \"loginDiscords\",\n    value: function () {\n      var _loginDiscords = _asyncToGenerator(function* () {\n        console.log('logindiscord');\n        try {\n          var response = yield fetch(api + \"/users/discord/login\", {\n            method: \"GET\",\n            headers: this.fillRequestHeaders()\n          }).then(function (response) {\n            console.log('ange ' + response);\n            var data = response.text();\n            console.log(data);\n            return data;\n          });\n        } catch (error) {\n          console.error('Erreur de connexion discord:', error);\n          return 500;\n        }\n      });\n      function loginDiscords() {\n        return _loginDiscords.apply(this, arguments);\n      }\n      return loginDiscords;\n    }()\n  }, {\n    key: \"loginDiscord\",\n    value: function () {\n      var _loginDiscord = _asyncToGenerator(function* () {\n        var _this = this;\n        console.log('Try to connect to Discord');\n        return new Promise(function (resolve, reject) {\n          fetch(api + '/users/discord/login', {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': 'Bearer ' + _classPrivateFieldLooseBase(_this, _accesToken)[_accesToken]\n            },\n            credentials: 'include'\n          }).then(function (response) {\n            if (response.status === 200) {\n              response.text().then(function (data) {\n                console.log('Response JSON:', data);\n                resolve(data);\n              }).catch(function (jsonError) {\n                console.error('Error:', jsonError);\n                reject(jsonError);\n              });\n            } else {\n              response.json().then(function (data) {\n                console.log('Response JSON:', data);\n                console.log(data.err);\n                alert(data.err);\n                reject(data.err);\n              }).catch(function (error) {\n                console.error(error);\n                reject(error);\n              });\n            }\n          }).catch(function (error) {\n            console.error(error);\n            reject(error);\n          });\n        });\n      });\n      function loginDiscord() {\n        return _loginDiscord.apply(this, arguments);\n      }\n      return loginDiscord;\n    }()\n  }, {\n    key: \"checkMail\",\n    value: function () {\n      var _checkMail = _asyncToGenerator(function* (mail) {\n        try {\n          var response = yield fetch(api + \"/auth/check_mail\", {\n            method: \"POST\",\n            headers: this.fillRequestHeaders(),\n            body: JSON.stringify({\n              email: mail\n            })\n          });\n          var statusCode = response.status;\n          var data = yield response.json();\n          if (statusCode === 200) {\n            return 200;\n          } else if (statusCode === 201) {\n            return 201;\n          }\n        } catch (error) {\n          console.error('Erreur de connexion check mail:', error);\n          return 500;\n        }\n      });\n      function checkMail(_x4) {\n        return _checkMail.apply(this, arguments);\n      }\n      return checkMail;\n    }()\n  }, {\n    key: \"fetchAboutData\",\n    value: function () {\n      var _fetchAboutData = _asyncToGenerator(function* () {\n        try {\n          var headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + _classPrivateFieldLooseBase(this, _accesToken)[_accesToken]\n          };\n          var response = yield fetch(api + '/about.json', {\n            method: 'GET',\n            headers: headers\n          });\n          if (response.ok) {\n            var data = yield response.json();\n            return data;\n          } else {\n            console.error('Erreur lors de la requête GET :', response.status);\n          }\n        } catch (error) {\n          console.error('Erreur lors de la requête GET :', error);\n        }\n      });\n      function fetchAboutData() {\n        return _fetchAboutData.apply(this, arguments);\n      }\n      return fetchAboutData;\n    }()\n  }, {\n    key: \"startPrayerService\",\n    value: function () {\n      var _startPrayerService = _asyncToGenerator(function* () {\n        try {\n          var headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + _classPrivateFieldLooseBase(this, _accesToken)[_accesToken]\n          };\n          var response = yield fetch(api + '/datetime/sendprayertime', {\n            method: 'POST',\n            headers: headers\n          });\n          if (response.ok) {\n            console.log('Service de prière démarré avec succès');\n          } else {\n            throw new Error('La requête a échoué');\n          }\n        } catch (error) {\n          console.error('Erreur lors du démarrage du service de prière', error);\n          throw error;\n        }\n      });\n      function startPrayerService() {\n        return _startPrayerService.apply(this, arguments);\n      }\n      return startPrayerService;\n    }()\n  }]);\n  return Client;\n}();\n;\nvar User = new Client();\nexport default User;","map":{"version":3,"names":["api","_accesToken","_classPrivateFieldLooseKey","_personal","Client","_classCallCheck","Object","defineProperty","writable","value","undefined","isLoggedIn","_createClass","key","fillRequestHeaders","_classPrivateFieldLooseBase","_getData","_asyncToGenerator","endpoint","response","fetch","headers","json","getData","_x","apply","arguments","_fetchPersonalData","error","fetchPersonalData","_login","mail","password","method","body","JSON","stringify","email","statusCode","status","data","access_token","console","login","_x2","_x3","_discord_calendar","discord_calendar","_loginGithub","log","loginGithub","_loginNotion","loginNotion","_loginCalendar","loginCalendar","_loginDiscords","then","text","loginDiscords","_loginDiscord","_this","Promise","resolve","reject","credentials","catch","jsonError","err","alert","loginDiscord","_checkMail","checkMail","_x4","_fetchAboutData","ok","fetchAboutData","_startPrayerService","Error","startPrayerService","User"],"sources":["/home/Rawowoo/Tek3/DEV/area-sync-mirror/Mobile_Client/User.js"],"sourcesContent":["const api = 'https://area-sync-stagging.onrender.com';\n\nclass Client {\n    #accesToken = undefined;\n    #personal = null;\n    constructor() {\n        this.isLoggedIn = false;\n    }\n    fillRequestHeaders() {\n        return {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + this.#accesToken,\n        };\n    }\n\n    async getData(endpoint) {\n        const response = await fetch(endpoint,\n            {\n                headers: this.fillRequestHeaders()\n            });\n        return await response.json();\n    }\n\n    async fetchPersonalData() {\n        try {\n            this.#personal = await this.getData(api + '/me');\n        } catch (error) {\n            // console.log(error);\n        }\n    }\n\n    async login(mail, password) {\n        try {\n            const response = await fetch(api + \"/auth/login\", {\n                method: \"POST\",\n                headers: this.fillRequestHeaders(),\n                body: JSON.stringify({ email: mail, password: password }),\n            });\n            const statusCode = response.status;\n            const data = await response.json();\n            if (statusCode === 200) {\n                // console.log(\"Is goodlogin\");\n                this.isLoggedIn = true;\n                this.#accesToken = data.access_token;\n                await this.fetchPersonalData();\n                return 200;\n            } else if (statusCode === 400) {\n                // console.log(\"Is badlogin\");\n                return 400;\n            }\n        } catch (error) {\n            console.error('Erreur de connexion :', error);\n            return 500;\n        }\n    }\n\n    async discord_calendar() {\n        try {\n            const response = await fetch(api + \"/users/discord/calendar/connect\", {\n                method: \"POST\",\n                headers: this.fillRequestHeaders(),\n                // body: JSON.stringify({ email: mail, password: password }),\n            });\n            const statusCode = response.status;\n            const data = await response.json();\n            // if (statusCode === 200) {\n            //     // console.log(\"Is goodlogin\");\n            //     this.isLoggedIn = true;\n            //     this.#accesToken = data.access_token;\n            //     await this.fetchPersonalData();\n            //     return 200;\n            // } else if (statusCode === 400) {\n            //     // console.log(\"Is badlogin\");\n            //     return 400;\n            // }\n        } catch (error) {\n            console.error('Erreur de connexion :', error);\n            return 500;\n        }\n    }\n\n\n    async loginGithub() {\n        try {\n            const response = await fetch(api + \"/users/github/login\", {\n                method: \"GET\",\n                headers: this.fillRequestHeaders(),\n                // body: JSON.stringify({ email: mail, password: password }),\n            });\n            console.log(\"Reponse: \" + response);\n            return response;\n        } catch (error) {\n            console.error('Erreur de connexion github:', error);\n            return 500;\n        }\n    }\n\n    async loginNotion() {\n        try {\n            const response = await fetch(api + \"/users/notion/login\", {\n                method: \"GET\",\n                headers: this.fillRequestHeaders(),\n                // body: JSON.stringify({ email: mail, password: password }),\n            });\n        } catch (error) {\n            console.error('Erreur de connexion github:', error);\n            return 500;\n        }\n    }\n\n    async loginCalendar() {\n        try {\n            const response = await fetch(api + \"/users/calendar/login\", {\n                method: \"GET\",\n                headers: this.fillRequestHeaders(),\n                // body: JSON.stringify({ email: mail, password: password }),\n            });\n        } catch (error) {\n            console.error('Erreur de connexion github:', error);\n            return 500;\n        }\n    }\n\n    async loginDiscords() {\n        console.log('logindiscord');\n        try {\n            const response = await fetch(api + \"/users/discord/login\", {\n                method: \"GET\",\n                headers: this.fillRequestHeaders(),\n                // body: JSON.stringify({ email: mail, password: password }),\n            })\n                .then(response => {\n                    console.log('ange ' + response);\n                    const data = response.text();\n                    console.log(data);\n                    return data\n                })\n            // .catch(error => {\n            //     console.error(error);\n            // });\n        } catch (error) {\n            console.error('Erreur de connexion discord:', error);\n            return 500;\n        }\n    }\n\n    async loginDiscord() {\n        console.log('Try to connect to Discord');\n        return new Promise((resolve, reject) => {\n            fetch(api + '/users/discord/login', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + this.#accesToken,\n                },\n                credentials: 'include',\n            })\n                .then(response => {\n                    if (response.status === 200) {\n                        response.text()\n                            .then(data => {\n                                console.log('Response JSON:', data);\n                                resolve(data);\n                            })\n                            .catch(jsonError => {\n                                console.error('Error:', jsonError);\n                                reject(jsonError);\n                            });\n                    } else {\n                        response.json()\n                            .then(data => {\n                                console.log('Response JSON:', data);\n                                console.log(data.err);\n                                alert(data.err);\n                                reject(data.err);\n                            })\n                            .catch(error => {\n                                console.error(error);\n                                reject(error);\n                            });\n                    }\n                })\n                .catch(error => {\n                    console.error(error);\n                    reject(error);\n                });\n        });\n    }\n\n    async checkMail(mail) {\n        try {\n            const response = await fetch(api + \"/auth/check_mail\", {\n                method: \"POST\",\n                headers: this.fillRequestHeaders(),\n                body: JSON.stringify({ email: mail }),\n            });\n            const statusCode = response.status;\n            const data = await response.json();\n            // console.log(statusCode);\n            if (statusCode === 200) {\n                // console.log(\"mail already exist\");\n                return 200;\n            } else if (statusCode === 201) {\n                // console.log(\"you have to register\");\n                return 201;\n            }\n        } catch (error) {\n            console.error('Erreur de connexion check mail:', error);\n            return 500;\n        }\n    }\n\n    async fetchAboutData() {\n        try {\n            // const token = 'votre_token'; // Remplacez par votre token d'authentification\n            const headers = {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.#accesToken,\n            };\n            const response = await fetch(api + '/about.json', {\n                method: 'GET',\n                headers: headers,\n            });\n            if (response.ok) {\n                const data = await response.json();\n                // console.log(data);\n                return data;\n            } else {\n                console.error('Erreur lors de la requête GET :', response.status);\n            }\n        } catch (error) {\n            console.error('Erreur lors de la requête GET :', error);\n        }\n    }\n\n    async startPrayerService() {\n        try {\n            const headers = {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.#accesToken,\n            };\n            const response = await fetch(api + '/datetime/sendprayertime', {\n                method: 'POST',\n                headers: headers,\n            });\n            if (response.ok) {\n                console.log('Service de prière démarré avec succès');\n            } else {\n                throw new Error('La requête a échoué');\n            }\n        } catch (error) {\n            console.error('Erreur lors du démarrage du service de prière', error);\n            throw error;\n        }\n    }\n};\n\n// async fetchAboutData() {\n//     try {\n//         const response = await fetch(api + \"/about.json\",\n//             {\n//                 method: \"GET\",\n//                 headers: this.fillRequestHeaders(),\n//             });\n//         if (response.ok) {\n//             const data = await response.json();\n//             console.log(data);\n//             return data;\n//         } else {\n//             console.error('Erreur lors de la requête GET1111 :', response.status);\n//         }\n//     } catch (error) {\n//         console.error('Erreur lors de la requête GET2222 :', error);\n//     }\n// }\n\nconst User = new Client();\nexport default User;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}